var Declaration = require('./declaration');
var Container   = require('./container');
var Comment     = require('./comment');
var AtRule      = require('./at-rule');
var Result      = require('./result');
var Rule        = require('./rule');

// Root of CSS
var Root = (function(super$0){var DP$0 = Object.defineProperty;var MIXIN$0 = function(t,s){for(var p in s){if(s.hasOwnProperty(p)){DP$0(t,p,Object.getOwnPropertyDescriptor(s,p));}}return t};"use strict";MIXIN$0(Root, super$0);
    function Root(defaults) {
        this.type  = 'root';
        this.rules = [];
        super$0.call(this, defaults);
    }Root.prototype = Object.create(super$0.prototype, {"constructor": {"value": Root, "configurable": true, "writable": true} });DP$0(Root, "prototype", {"configurable": false, "enumerable": false, "writable": false});

    // Fix spaces on insert before first rule
    Root.prototype.normalize = function(child, sample, type) {
        child = super$0.prototype.normalize.call(this, child, sample, type);

        if ( type == 'prepend' ) {
            if ( this.rules.length > 1 ) {
                sample.before = this.rules[1].before;
            } else {
                sample.before = this.after;
            }
        }

        return child;
    }

    // Stringify styles
    Root.prototype.stringify = function(builder) {
        this.stringifyContent(builder);
        if ( this.after) builder(this.after);
    }

    // Generate processing result with optional source map
    Root.prototype.toResult = function() {var opts = arguments[0];if(opts === void 0)opts = { };
        return new Result(this, opts);
    }
;return Root;})(Container.WithRules);

module.exports = Root;
